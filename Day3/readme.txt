STL的整体结构

STL组件之间的关系：
    --容器通过内存分配器分配空间
    --容器和算法分离
    --算法通过迭代器访问容器
    --仿函数协助算法完成不同的策略变化
    --适配器套接仿函数

仿函数（Functions）(通过类的()重载实现)
    --仿函数又称为函数对象（Function Object），其作用相当于一个函数指针
    --要姜某种“行为”作为算法的参数，就需要姜该行为函数指针作为算法的参数
    --STL中将这种行为函数指针定义为所谓的仿函数，其实现是一个class，再以该仿函数产生一个对象作为算法参数 如：for_each算法：

    为什么要用仿函数而不是普通的函数指针作为算法的行为参数？
        普通函数指针不能满足STL的抽象要求
            怎么定义函数指针？参数和返回型别如何确定？
        函数指针无法和STL其他组件交互

仿函数适配器(Functor Adapters)
    --仿函数适配器，目的在于将无法匹配的仿函数套接成可以匹配的类型
    binder1st,binder2nd,mem_fun,mem_fun_ref

其他值得注意的问题
    (1)std::string/std::wstring与vector<char>/vector<wchar_t>
    (2)当new处对象并放入容器的时候，要在销毁容器浅delete那些对象
    (3)尽量用算法调用代替手写循环
    (4)使用swap为容器缩水
    (5)在有对象继承情况下，建立指针的容器而不是对象的容器



