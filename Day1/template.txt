C++模板简介
模板（Templates）是c++的一种特性，允许函数或类对象通过泛型（generic types）的形式表现或运用。
模板可以使得函数或类在对应不同型别（types）的时候可以正常工作，而无需为每一个型别都写一份代码。
模板有两种类型：类模板与函数模板 模板的声明其实并未给出一个函数或类的定义，只提供了一个语法框架（syntactical skeleton）
模板实例化： 显式实例化与隐式实例化  template <typename> struct Object{};

函数模板是参数化的一族函数（a family of function）
template <typename T>
inline T max(const T& a,const T& b)
{
    return (a>b)?a:b;
}
请尽量使用typename

模板被编译了两次
1）没有实例化之前，检查模板代码本身是否有语法错误
2）实例化期间，检查对模板代码的调用是否合法

模板的参数在实例化的时候一定要严格对应
否则需要显示指定T的类别

允许空的参数列表
Max<>(7,42);调用Max<int>()

函数模板可以重载


类模板：类模板实参可以是某一类型或常量（仅限int或者enum）
模板传递的实参

const std::size_t DefaultStackSize = 1024;
template <typename T,std::size_t n = DefaultStackSize> 
class Stack
{
public:
    void Push(const T const& element);
    int Pop(T& element) const;
private:
    std::vector<T> m_Members;
    std::size_t m_nMaxSize = n;
};

--T可以是任意类别
--模板实参可以是一个int或enum型别的常量（此处是size_t,本质是int类型）
--n是编译时定义的常量
--n可以有默认值
--size_t 型别的成员变量可以用n初始化

Stack<Stack<int> > intStackStack; //中间两个>>之间需要用空格断开，否则编译器可能会认为是一个>>操作符

类模板的特化（specialization）：
template <>
class Stack<std::wstring>
{
public:
    void SetStackSize(const std::size_t n){m_nMaxSize.size();}
}

类模板的偏特化（partial specialization）：
-template <typename T1,typename T2> class MyClass{...};  //Primary

--将模板参数偏特化为同样型别：
    template <typename T> class MyClass<T,T>{...};
--将第二个参数偏特化为int型别，不再是泛型的T
    template <typename T> class MyClass<T,int> {...};
--将两个型别偏特化为指针：
    template <typename T1,typenmae T2> class MyClass<T1*,T2*>{...};

默认模板实参：类似函数的默认参数，对于类模板而言也可以定义其模板参数的默认值，这些值就是默认模板参数

关键字operator定义了一种特殊的函数
操作符重载
-不可以用operator定义一种新的操作符
-对于内置型别（built-in type）,不能再用operator重载
-操作符重载的两种情况
--非静态成员函数或静态全局函数（如果该全局函数需要访问类的private或protected成员，则必须声明为friend）

操作符重载的一般规则
--一元操作符（unary operators）如果有声明为成员函数，则没有参数，全局函数有一个参数
--二元操作符（binary operators）如果声明为成员函数，则有一个参数，如果声明为全局函数则有两个参数
如果一个操作符既能做一元操作符，又能做二元操作符，则可以被分别重载（如：&,*,+,-）
除了operator=，所有其他操作符重载均可以被子类继承




